<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on dev2820 개발일지</title>
    <link>https://dev2820.github.io/subcategories/git/</link>
    <description>Recent content in git on dev2820 개발일지</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <managingEditor>second28200@gmail.com (YANG GI JO)</managingEditor>
    <webMaster>second28200@gmail.com (YANG GI JO)</webMaster>
    <lastBuildDate>Wed, 31 Mar 2021 21:20:15 +0900</lastBuildDate><atom:link href="https://dev2820.github.io/subcategories/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Git 정리] 그 밖의 유용한 명령어들</title>
      <link>https://dev2820.github.io/study/git/git-%EC%A0%95%EB%A6%AC-%EA%B7%B8-%EB%B0%96%EC%9D%98-%EC%9C%A0%EC%9A%A9%ED%95%9C-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%93%A4/</link>
      <pubDate>Wed, 31 Mar 2021 21:20:15 +0900</pubDate>
      <author>second28200@gmail.com (YANG GI JO)</author>
      <guid>https://dev2820.github.io/study/git/git-%EC%A0%95%EB%A6%AC-%EA%B7%B8-%EB%B0%96%EC%9D%98-%EC%9C%A0%EC%9A%A9%ED%95%9C-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%93%A4/</guid>
      <description>.gitignore: 무시할 파일 .DS_Store, .swp 등등 로컬 저장소에는 있지만, 관리도 하고 싶지 않고, 원격저장소에 업로드하고 싶지도 않은 파일들이 있습니다. 이런 파일들을 git이 무시하도</description>
    </item>
    
    <item>
      <title>[Git 정리] 원격저장소와 연결하기</title>
      <link>https://dev2820.github.io/study/git/git-%EC%A0%95%EB%A6%AC-%EC%9B%90%EA%B2%A9%EC%A0%80%EC%9E%A5%EC%86%8C%EC%99%80-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0/</link>
      <pubDate>Wed, 31 Mar 2021 21:19:53 +0900</pubDate>
      <author>second28200@gmail.com (YANG GI JO)</author>
      <guid>https://dev2820.github.io/study/git/git-%EC%A0%95%EB%A6%AC-%EC%9B%90%EA%B2%A9%EC%A0%80%EC%9E%A5%EC%86%8C%EC%99%80-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0/</guid>
      <description>이제 로컬에서 git을 다루는 것은 얼추 다룬 것 같으니 원격저장소와 통신하는 것에 대해 알아봅시다. 이 글에선 원격저장소 github을 기준으로 설명하겠습니다</description>
    </item>
    
    <item>
      <title>[Git 정리] 병합 취소하기</title>
      <link>https://dev2820.github.io/study/git/git-%EC%A0%95%EB%A6%AC-%EB%B3%91%ED%95%A9-%EC%B7%A8%EC%86%8C%ED%95%98%EA%B8%B0/</link>
      <pubDate>Wed, 31 Mar 2021 18:46:18 +0900</pubDate>
      <author>second28200@gmail.com (YANG GI JO)</author>
      <guid>https://dev2820.github.io/study/git/git-%EC%A0%95%EB%A6%AC-%EB%B3%91%ED%95%A9-%EC%B7%A8%EC%86%8C%ED%95%98%EA%B8%B0/</guid>
      <description>이번 글에서는 병합을 취소하는 명령어들을 배웁니다. reset을 이용한 병합 취소 병합이 일어난 직후엔 git엔 ORIG_HEAD라는 새로운 참조 commi</description>
    </item>
    
    <item>
      <title>[Git 정리] 작업 취소하기</title>
      <link>https://dev2820.github.io/study/git/git-%EC%A0%95%EB%A6%AC-%EC%9E%91%EC%97%85-%EC%B7%A8%EC%86%8C%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sun, 28 Mar 2021 20:15:34 +0900</pubDate>
      <author>second28200@gmail.com (YANG GI JO)</author>
      <guid>https://dev2820.github.io/study/git/git-%EC%A0%95%EB%A6%AC-%EC%9E%91%EC%97%85-%EC%B7%A8%EC%86%8C%ED%95%98%EA%B8%B0/</guid>
      <description>이번 장에서는 git에서 작업을 되돌리는 방법에 대해 배웁니다. 변경사항 되돌리기 staging 취소하기 commit 변경, 삭제하기 하지만 이런 것들을 배우기 전에 브랜치를 적극적으</description>
    </item>
    
    <item>
      <title>[Git 정리] 브랜치 병합</title>
      <link>https://dev2820.github.io/study/git/git-%EC%A0%95%EB%A6%AC-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%B3%91%ED%95%A9/</link>
      <pubDate>Sun, 28 Mar 2021 20:14:11 +0900</pubDate>
      <author>second28200@gmail.com (YANG GI JO)</author>
      <guid>https://dev2820.github.io/study/git/git-%EC%A0%95%EB%A6%AC-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%B3%91%ED%95%A9/</guid>
      <description>merge: 브랜치 합치기 1 2 # git merge [브랜치 이름] git merge good-idea 두 서로 다른 브랜치를 하나로 합치는 명령입니다. 여러분은 굉장히 좋은 아이디어가 떠올라 good-idea라</description>
    </item>
    
    <item>
      <title>[Git 정리] 브랜치</title>
      <link>https://dev2820.github.io/study/git/git-%EC%A0%95%EB%A6%AC-%EB%B8%8C%EB%9E%9C%EC%B9%98/</link>
      <pubDate>Sun, 28 Mar 2021 15:01:25 +0900</pubDate>
      <author>second28200@gmail.com (YANG GI JO)</author>
      <guid>https://dev2820.github.io/study/git/git-%EC%A0%95%EB%A6%AC-%EB%B8%8C%EB%9E%9C%EC%B9%98/</guid>
      <description>이번 글에선 branch에 대해 다룹니다. branch? branch가 뭔지에 대해 이해하려면 git의 버전 관리에 대한 전반적인 이해가 필요합니다. git의 동작 방식을</description>
    </item>
    
    <item>
      <title>[Git정리] 버전관리의 시작</title>
      <link>https://dev2820.github.io/study/git/git-%EC%A0%95%EB%A6%AC-%EB%B2%84%EC%A0%84%EA%B4%80%EB%A6%AC%EC%9D%98-%EC%8B%9C%EC%9E%91/</link>
      <pubDate>Sun, 28 Mar 2021 14:11:53 +0900</pubDate>
      <author>second28200@gmail.com (YANG GI JO)</author>
      <guid>https://dev2820.github.io/study/git/git-%EC%A0%95%EB%A6%AC-%EB%B2%84%EC%A0%84%EA%B4%80%EB%A6%AC%EC%9D%98-%EC%8B%9C%EC%9E%91/</guid>
      <description>이번 글에선 생성된 로컬 저장소를 바탕으로 git으로 버전 관리를 하는 방법에 대해 다루겠습니다. status: 저장소의 상태 파악하기 1 git status 현재 저장소의 상태를 알려주는 명</description>
    </item>
    
    <item>
      <title>[Git정리] 로컬 저장소 생성하기</title>
      <link>https://dev2820.github.io/study/git/git-%EC%A0%95%EB%A6%AC-%EB%A1%9C%EC%BB%AC-%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sun, 28 Mar 2021 12:37:27 +0900</pubDate>
      <author>second28200@gmail.com (YANG GI JO)</author>
      <guid>https://dev2820.github.io/study/git/git-%EC%A0%95%EB%A6%AC-%EB%A1%9C%EC%BB%AC-%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/</guid>
      <description>시작하기 전에 시작하기 전 아주 간단하게 git을 설명해봅시다. git: 소스 코드 버전 관리 소프트웨어 github: 소스 코드 원격저장소, 소스 코드 원격 호스팅 서비스 로컬저장소</description>
    </item>
    
  </channel>
</rss>
